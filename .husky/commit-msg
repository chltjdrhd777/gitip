
# 커밋 컨벤션
# 0. 검사 예외 조건 (자동 생성, 최초 커밋)
# 1. 접두사의 글자는 소문자
# 2. 맨 마지막 글자 '.' 마침표 금지
# 3. 커밋 접두사 (규칙: '접두사' + '콜론' + ' ')
# - feat: 새로운 기능 추가
# - fix: 버그 수정
# - docs: 문서의 수정
# - style: (코드의 수정 없이) 스타일(style)만 변경(들여쓰기 같은 포맷이나 세미콜론을 빼먹은 경우)
# - refactor: 코드를 리펙토링
# - test: Test 관련한 코드의 추가, 수정
# - chore: (코드의 수정 없이) 설정을 변경
# - design: css 코드 수정
# - build: build 및 관련 설정 변경

PREFIXES=(
  "feat"
  "fix"
  "docs"
  "style"
  "refactor"
  "test"
  "design"
  "build"
  "chore"
)

# merge prefixes = |feat|fix|docs .... etc
CONVENTION_PATTERN=$(printf "|%s" "${PREFIXES[@]}") 
# formating for regular expression = |feat|fix|docs.... to ^(feat|fix|docs):
CONVENTION_PATTERN="^(${CONVENTION_PATTERN:1}): "

#.git/COMMIT_EDITMSG
COMMIT_MSG_FILE=$1 

# commit title
FIRST_LINE=$(head -n1 "${COMMIT_MSG_FILE}")

check_auto_commit() {
  if echo "$FIRST_LINE" | grep -Eq "^(Merge branch|Merge pull request)"; then
    echo "Automatically generated commit message from git"
    exit 0
  fi
}

check_initial_commit() {
  if echo "$FIRST_LINE" | grep -Eq "^initial"; then
    echo "Initial commit"
    exit 0
  fi
}

check_commit_message_format() {
  if echo "$FIRST_LINE" | grep -qE "\.$"; then
    echo "CommitLint#1: 문장 마지막의 ('.') 마침표를 제거해주세요."
    exit 1
  fi

  if ! echo "$FIRST_LINE" | grep -Eq "$CONVENTION_PATTERN"; then
    echo "CommitLint#2: 접두사, 콜론, 띄어쓰기 형태를 확인하세요. (${PREFIXES[*]}: )"
    exit 1
  fi
}

main() {
  check_auto_commit
  check_initial_commit
  check_commit_message_format
  echo "Pass commit lint!"
}

main
